diff --git a/alumniportal/display_views.py b/alumniportal/display_views.py
index bd04619..8d66ccf 100644
--- a/alumniportal/display_views.py
+++ b/alumniportal/display_views.py
@@ -116,6 +116,7 @@ def items(request, class_type, item_type):
 ignoreField = ['company']
 @login_required
 def createQuery(queryset, result, field):
+    print queryset, result,field
     result = result | Q(**{field + "__icontains" : queryset[field]})
     return result
 
@@ -139,15 +140,14 @@ def search(request):
         
         for field in queryset:
             if queryset[field]:
+                # import pdb; pdb.set_trace()
                 query = createQuery(queryset, query, field)
         if past_company:
             query = query | Q(jobs__company__icontains = past_company)
         if past_education:
             query = query | Q(educations__institute__icontains = past_education)
 
-        # import pdb; pdb.set_trace()
         profiles = models.Profile.objects.filter(query).distinct()
-        # kj
         print query
         print profiles
     return render(request, 'alumniportal/search.html', {
diff --git a/alumniportal/forms_views.py b/alumniportal/forms_views.py
index d52530f..4b2e278 100644
--- a/alumniportal/forms_views.py
+++ b/alumniportal/forms_views.py
@@ -303,7 +303,7 @@ def edit_education(request):
             'profile':'education',
             'helper':helper,
             'currents':educations,
-            'current_education':profile.current_education,
+            'currentEducation':profile.currentEducation,
             'username': request.user.username,
             'no_profile': not profile,
             })
@@ -346,7 +346,7 @@ def edit_professional(request):
             'profile':'professional',
             'helper':helper,
             'currents':jobs,
-            'current_job':profile.current_job,
+            'currentJob':profile.currentJob,
             'username': request.user.username,
             'no_profile': not profile,
             })
@@ -441,11 +441,11 @@ def current(request):
     if request.POST:
         profile = request.user.profile
         if request.path == '/edit-profile/professional/current/':
-            profile.current_job = models.Job.objects.get(id=request.POST['current'])
+            profile.currentJob = models.Job.objects.get(id=request.POST['current'])
             profile.save()
             messages.success(request, "Changes Saved")
         elif request.path == '/edit-profile/education/current/':
-            profile.current_education = models.Education.objects.get(id=request.POST['current'])
+            profile.currentEducation = models.Education.objects.get(id=request.POST['current'])
             profile.save()
             messages.success(request, "Changes Saved")
         else:
diff --git a/alumniportal/migrations/0001_initial.py b/alumniportal/migrations/0001_initial.py
index 97cc0f4..870fbdb 100644
--- a/alumniportal/migrations/0001_initial.py
+++ b/alumniportal/migrations/0001_initial.py
@@ -108,8 +108,8 @@ class Migration(migrations.Migration):
                 ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                 ('company', models.CharField(max_length=50)),
                 ('position', models.CharField(max_length=50, blank=True)),
-                ('start_date', models.IntegerField(choices=[(1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014)])),
-                ('end_date', models.IntegerField(blank=True, null=True, choices=[(1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014)])),
+                ('start_date', models.IntegerField(choices=[(1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015)])),
+                ('end_date', models.IntegerField(blank=True, null=True, choices=[(1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015)])),
                 ('description', models.CharField(max_length=50, blank=True)),
                 ('city', models.CharField(max_length=50, blank=True)),
             ],
@@ -154,28 +154,28 @@ class Migration(migrations.Migration):
             name='Profile',
             fields=[
                 ('profile_type', models.CharField(blank=True, max_length=16, choices=[(b'is_alumni', b'Alumni'), (b'is_stud', b'Current Student'), (b'is_prof', b'Professor')])),
-                ('roll_no', models.IntegerField(unique=True, serialize=False, primary_key=True)),
                 ('name', models.CharField(max_length=50)),
                 ('gender', models.CharField(blank=True, max_length=7, choices=[(b'm', b'Male'), (b'f', b'Female'), (b'o', b'Other')])),
                 ('date_of_birth', models.DateTimeField(null=True, blank=True)),
+                ('alternate_email', models.EmailField(max_length=254, blank=True)),
+                ('hostel', models.CharField(blank=True, max_length=15, choices=[(b'Barak', b'Barak'), (b'Brahmaputra', b'Brahmaputra'), (b'Dhansiri', b'Dhansiri'), (b'Dibang', b'Dibang'), (b'Dihing', b'Dihing'), (b'Kameng', b'Kameng'), (b'Kapili', b'Kapili'), (b'Lohit', b'Lohit'), (b'Manas', b'Manas'), (b"Married Scholar's Hostel", b"Married Scholar's Hostel"), (b'Siang', b'Siang'), (b'Subansiri', b'Subansiri'), (b'Umiam', b'Umiam'), (b'Other', b'Other')])),
+                ('room_no', models.CharField(max_length=10, blank=True)),
+                ('roll_no', models.IntegerField(unique=True, serialize=False, primary_key=True)),
+                ('batch', models.CharField(max_length=16, choices=[(b'1998 B.Tech.', b'1998 B.Tech.'), (b'1999 B.Tech.', b'1999 B.Tech.'), (b'2000 B.Tech.', b'2000 B.Tech.'), (b'2001 B.Tech.', b'2001 B.Tech.'), (b'2002 B.Tech.', b'2002 B.Tech.'), (b'2003 B.Tech.', b'2003 B.Tech.'), (b'2004 B.Tech.', b'2004 B.Tech.'), (b'2005 B.Tech.', b'2005 B.Tech.'), (b'2006 B.Tech.', b'2006 B.Tech.'), (b'2007 B.Tech.', b'2007 B.Tech.'), (b'2008 B.Tech.', b'2008 B.Tech.'), (b'2009 B.Tech.', b'2009 B.Tech.'), (b'2010 B.Tech.', b'2010 B.Tech.'), (b'2011 B.Tech.', b'2011 B.Tech.'), (b'2012 B.Tech.', b'2012 B.Tech.'), (b'2013 B.Tech.', b'2013 B.Tech.'), (b'2014 B.Tech.', b'2014 B.Tech.'), (b'2015 B.Tech.', b'2015 B.Tech.'), (b'2016 B.Tech.', b'2016 B.Tech.'), (b'2017 B.Tech.', b'2017 B.Tech.'), (b'2018 B.Tech.', b'2018 B.Tech.'), (b'2019 B.Tech.', b'2019 B.Tech.'), (b'1998 M.Tech.', b'1998 M.Tech.'), (b'1999 M.Tech.', b'1999 M.Tech.'), (b'2000 M.Tech.', b'2000 M.Tech.'), (b'2001 M.Tech.', b'2001 M.Tech.'), (b'2002 M.Tech.', b'2002 M.Tech.'), (b'2003 M.Tech.', b'2003 M.Tech.'), (b'2004 M.Tech.', b'2004 M.Tech.'), (b'2005 M.Tech.', b'2005 M.Tech.'), (b'2006 M.Tech.', b'2006 M.Tech.'), (b'2007 M.Tech.', b'2007 M.Tech.'), (b'2008 M.Tech.', b'2008 M.Tech.'), (b'2009 M.Tech.', b'2009 M.Tech.'), (b'2010 M.Tech.', b'2010 M.Tech.'), (b'2011 M.Tech.', b'2011 M.Tech.'), (b'2012 M.Tech.', b'2012 M.Tech.'), (b'2013 M.Tech.', b'2013 M.Tech.'), (b'2014 M.Tech.', b'2014 M.Tech.'), (b'2015 M.Tech.', b'2015 M.Tech.'), (b'2016 M.Tech.', b'2016 M.Tech.'), (b'2017 M.Tech.', b'2017 M.Tech.'), (b'2018 M.Tech.', b'2018 M.Tech.'), (b'2019 M.Tech.', b'2019 M.Tech.'), (b'1998 B.Des.', b'1998 B.Des.'), (b'1999 B.Des.', b'1999 B.Des.'), (b'2000 B.Des.', b'2000 B.Des.'), (b'2001 B.Des.', b'2001 B.Des.'), (b'2002 B.Des.', b'2002 B.Des.'), (b'2003 B.Des.', b'2003 B.Des.'), (b'2004 B.Des.', b'2004 B.Des.'), (b'2005 B.Des.', b'2005 B.Des.'), (b'2006 B.Des.', b'2006 B.Des.'), (b'2007 B.Des.', b'2007 B.Des.'), (b'2008 B.Des.', b'2008 B.Des.'), (b'2009 B.Des.', b'2009 B.Des.'), (b'2010 B.Des.', b'2010 B.Des.'), (b'2011 B.Des.', b'2011 B.Des.'), (b'2012 B.Des.', b'2012 B.Des.'), (b'2013 B.Des.', b'2013 B.Des.'), (b'2014 B.Des.', b'2014 B.Des.'), (b'2015 B.Des.', b'2015 B.Des.'), (b'2016 B.Des.', b'2016 B.Des.'), (b'2017 B.Des.', b'2017 B.Des.'), (b'2018 B.Des.', b'2018 B.Des.'), (b'2019 B.Des.', b'2019 B.Des.'), (b'1998 Ph.D.', b'1998 Ph.D.'), (b'1999 Ph.D.', b'1999 Ph.D.'), (b'2000 Ph.D.', b'2000 Ph.D.'), (b'2001 Ph.D.', b'2001 Ph.D.'), (b'2002 Ph.D.', b'2002 Ph.D.'), (b'2003 Ph.D.', b'2003 Ph.D.'), (b'2004 Ph.D.', b'2004 Ph.D.'), (b'2005 Ph.D.', b'2005 Ph.D.'), (b'2006 Ph.D.', b'2006 Ph.D.'), (b'2007 Ph.D.', b'2007 Ph.D.'), (b'2008 Ph.D.', b'2008 Ph.D.'), (b'2009 Ph.D.', b'2009 Ph.D.'), (b'2010 Ph.D.', b'2010 Ph.D.'), (b'2011 Ph.D.', b'2011 Ph.D.'), (b'2012 Ph.D.', b'2012 Ph.D.'), (b'2013 Ph.D.', b'2013 Ph.D.'), (b'2014 Ph.D.', b'2014 Ph.D.'), (b'2015 Ph.D.', b'2015 Ph.D.'), (b'2016 Ph.D.', b'2016 Ph.D.'), (b'2017 Ph.D.', b'2017 Ph.D.'), (b'2018 Ph.D.', b'2018 Ph.D.'), (b'2019 Ph.D.', b'2019 Ph.D.'), (b'1998 Other', b'1998 Other'), (b'1999 Other', b'1999 Other'), (b'2000 Other', b'2000 Other'), (b'2001 Other', b'2001 Other'), (b'2002 Other', b'2002 Other'), (b'2003 Other', b'2003 Other'), (b'2004 Other', b'2004 Other'), (b'2005 Other', b'2005 Other'), (b'2006 Other', b'2006 Other'), (b'2007 Other', b'2007 Other'), (b'2008 Other', b'2008 Other'), (b'2009 Other', b'2009 Other'), (b'2010 Other', b'2010 Other'), (b'2011 Other', b'2011 Other'), (b'2012 Other', b'2012 Other'), (b'2013 Other', b'2013 Other'), (b'2014 Other', b'2014 Other'), (b'2015 Other', b'2015 Other'), (b'2016 Other', b'2016 Other'), (b'2017 Other', b'2017 Other'), (b'2018 Other', b'2018 Other'), (b'2019 Other', b'2019 Other')])),
+                ('department', models.CharField(blank=True, max_length=25, choices=[(b'bt', b'Biotechnology [BT]'), (b'cl', b'Chemical [CL]'), (b'che', b'Chemistry [CHE]'), (b'ce', b'Civil [CE]'), (b'cse', b'Computer Science [CSE]'), (b'ds', b'Design [DD]'), (b'eee', b'Electrical [EEE]'), (b'ece', b'Electronics [ECE]'), (b'hss', b'Humanities &amp; Social Sciences [HSS]'), (b'ma', b'Mathematics [MA]'), (b'me', b'Mechanical [ME]'), (b'ep', b'Physics [EP]'), (b'cfe', b'Centre for Energy'), (b'cfte', b'Centre for the Environment'), (b'cnt', b'Centre for Nanotechnology'), (b'o', b'Other')])),
+                ('home_contact_no', models.CharField(max_length=15, blank=True)),
+                ('work_contact_no', models.CharField(max_length=15, blank=True)),
                 ('current_address', models.TextField(blank=True)),
                 ('city', models.CharField(max_length=32, blank=True)),
                 ('country', models.CharField(max_length=32, blank=True)),
                 ('nationality', models.CharField(max_length=32, blank=True)),
-                ('alternate_email', models.EmailField(max_length=254, blank=True)),
                 ('google_link', models.URLField(blank=True)),
                 ('linkedin_link', models.URLField(blank=True)),
                 ('facebook_link', models.URLField(blank=True)),
                 ('github_link', models.URLField(blank=True)),
                 ('twitter_link', models.URLField(blank=True)),
-                ('home_contact_no', models.CharField(max_length=15, blank=True)),
-                ('work_contact_no', models.CharField(max_length=15, blank=True)),
-                ('hostel', models.CharField(blank=True, max_length=15, choices=[(b'Barak', b'Barak'), (b'Brahmaputra', b'Brahmaputra'), (b'Dhansiri', b'Dhansiri'), (b'Dibang', b'Dibang'), (b'Dihing', b'Dihing'), (b'Kameng', b'Kameng'), (b'Kapili', b'Kapili'), (b'Lohit', b'Lohit'), (b'Manas', b'Manas'), (b"Married Scholar's Hostel", b"Married Scholar's Hostel"), (b'Siang', b'Siang'), (b'Subansiri', b'Subansiri'), (b'Umiam', b'Umiam'), (b'Other', b'Other')])),
-                ('room_no', models.CharField(max_length=10, blank=True)),
-                ('batch', models.CharField(max_length=16, choices=[(b'1998 B.Tech.', b'1998 B.Tech.'), (b'1999 B.Tech.', b'1999 B.Tech.'), (b'2000 B.Tech.', b'2000 B.Tech.'), (b'2001 B.Tech.', b'2001 B.Tech.'), (b'2002 B.Tech.', b'2002 B.Tech.'), (b'2003 B.Tech.', b'2003 B.Tech.'), (b'2004 B.Tech.', b'2004 B.Tech.'), (b'2005 B.Tech.', b'2005 B.Tech.'), (b'2006 B.Tech.', b'2006 B.Tech.'), (b'2007 B.Tech.', b'2007 B.Tech.'), (b'2008 B.Tech.', b'2008 B.Tech.'), (b'2009 B.Tech.', b'2009 B.Tech.'), (b'2010 B.Tech.', b'2010 B.Tech.'), (b'2011 B.Tech.', b'2011 B.Tech.'), (b'2012 B.Tech.', b'2012 B.Tech.'), (b'2013 B.Tech.', b'2013 B.Tech.'), (b'2014 B.Tech.', b'2014 B.Tech.'), (b'2015 B.Tech.', b'2015 B.Tech.'), (b'2016 B.Tech.', b'2016 B.Tech.'), (b'2017 B.Tech.', b'2017 B.Tech.'), (b'2018 B.Tech.', b'2018 B.Tech.'), (b'1998 M.Tech.', b'1998 M.Tech.'), (b'1999 M.Tech.', b'1999 M.Tech.'), (b'2000 M.Tech.', b'2000 M.Tech.'), (b'2001 M.Tech.', b'2001 M.Tech.'), (b'2002 M.Tech.', b'2002 M.Tech.'), (b'2003 M.Tech.', b'2003 M.Tech.'), (b'2004 M.Tech.', b'2004 M.Tech.'), (b'2005 M.Tech.', b'2005 M.Tech.'), (b'2006 M.Tech.', b'2006 M.Tech.'), (b'2007 M.Tech.', b'2007 M.Tech.'), (b'2008 M.Tech.', b'2008 M.Tech.'), (b'2009 M.Tech.', b'2009 M.Tech.'), (b'2010 M.Tech.', b'2010 M.Tech.'), (b'2011 M.Tech.', b'2011 M.Tech.'), (b'2012 M.Tech.', b'2012 M.Tech.'), (b'2013 M.Tech.', b'2013 M.Tech.'), (b'2014 M.Tech.', b'2014 M.Tech.'), (b'2015 M.Tech.', b'2015 M.Tech.'), (b'2016 M.Tech.', b'2016 M.Tech.'), (b'2017 M.Tech.', b'2017 M.Tech.'), (b'2018 M.Tech.', b'2018 M.Tech.'), (b'1998 B.Des.', b'1998 B.Des.'), (b'1999 B.Des.', b'1999 B.Des.'), (b'2000 B.Des.', b'2000 B.Des.'), (b'2001 B.Des.', b'2001 B.Des.'), (b'2002 B.Des.', b'2002 B.Des.'), (b'2003 B.Des.', b'2003 B.Des.'), (b'2004 B.Des.', b'2004 B.Des.'), (b'2005 B.Des.', b'2005 B.Des.'), (b'2006 B.Des.', b'2006 B.Des.'), (b'2007 B.Des.', b'2007 B.Des.'), (b'2008 B.Des.', b'2008 B.Des.'), (b'2009 B.Des.', b'2009 B.Des.'), (b'2010 B.Des.', b'2010 B.Des.'), (b'2011 B.Des.', b'2011 B.Des.'), (b'2012 B.Des.', b'2012 B.Des.'), (b'2013 B.Des.', b'2013 B.Des.'), (b'2014 B.Des.', b'2014 B.Des.'), (b'2015 B.Des.', b'2015 B.Des.'), (b'2016 B.Des.', b'2016 B.Des.'), (b'2017 B.Des.', b'2017 B.Des.'), (b'2018 B.Des.', b'2018 B.Des.'), (b'1998 Ph.D.', b'1998 Ph.D.'), (b'1999 Ph.D.', b'1999 Ph.D.'), (b'2000 Ph.D.', b'2000 Ph.D.'), (b'2001 Ph.D.', b'2001 Ph.D.'), (b'2002 Ph.D.', b'2002 Ph.D.'), (b'2003 Ph.D.', b'2003 Ph.D.'), (b'2004 Ph.D.', b'2004 Ph.D.'), (b'2005 Ph.D.', b'2005 Ph.D.'), (b'2006 Ph.D.', b'2006 Ph.D.'), (b'2007 Ph.D.', b'2007 Ph.D.'), (b'2008 Ph.D.', b'2008 Ph.D.'), (b'2009 Ph.D.', b'2009 Ph.D.'), (b'2010 Ph.D.', b'2010 Ph.D.'), (b'2011 Ph.D.', b'2011 Ph.D.'), (b'2012 Ph.D.', b'2012 Ph.D.'), (b'2013 Ph.D.', b'2013 Ph.D.'), (b'2014 Ph.D.', b'2014 Ph.D.'), (b'2015 Ph.D.', b'2015 Ph.D.'), (b'2016 Ph.D.', b'2016 Ph.D.'), (b'2017 Ph.D.', b'2017 Ph.D.'), (b'2018 Ph.D.', b'2018 Ph.D.'), (b'1998 Other', b'1998 Other'), (b'1999 Other', b'1999 Other'), (b'2000 Other', b'2000 Other'), (b'2001 Other', b'2001 Other'), (b'2002 Other', b'2002 Other'), (b'2003 Other', b'2003 Other'), (b'2004 Other', b'2004 Other'), (b'2005 Other', b'2005 Other'), (b'2006 Other', b'2006 Other'), (b'2007 Other', b'2007 Other'), (b'2008 Other', b'2008 Other'), (b'2009 Other', b'2009 Other'), (b'2010 Other', b'2010 Other'), (b'2011 Other', b'2011 Other'), (b'2012 Other', b'2012 Other'), (b'2013 Other', b'2013 Other'), (b'2014 Other', b'2014 Other'), (b'2015 Other', b'2015 Other'), (b'2016 Other', b'2016 Other'), (b'2017 Other', b'2017 Other'), (b'2018 Other', b'2018 Other')])),
-                ('department', models.CharField(blank=True, max_length=25, choices=[(b'bt', b'Biotechnology [BT]'), (b'cl', b'Chemical [CL]'), (b'che', b'Chemistry [CHE]'), (b'ce', b'Civil [CE]'), (b'cse', b'Computer Science [CSE]'), (b'ds', b'Design [DD]'), (b'eee', b'Electrical [EEE]'), (b'ece', b'Electronics [ECE]'), (b'hss', b'Humanities &amp; Social Sciences [HSS]'), (b'ma', b'Mathematics [MA]'), (b'me', b'Mechanical [ME]'), (b'ep', b'Physics [EP]'), (b'cfe', b'Centre for Energy'), (b'cfte', b'Centre for the Environment'), (b'cnt', b'Centre for Nanotechnology'), (b'o', b'Other')])),
-                ('current_education', models.OneToOneField(related_name='current_education', null=True, blank=True, to='alumniportal.Education')),
-                ('current_job', models.OneToOneField(related_name='current_job', null=True, blank=True, to='alumniportal.Job')),
+                ('currentEducation', models.OneToOneField(related_name='currentEducation', null=True, blank=True, to='alumniportal.Education')),
+                ('currentJob', models.OneToOneField(related_name='currentJob', null=True, blank=True, to='alumniportal.Job')),
                 ('user', models.OneToOneField(blank=True, to=settings.AUTH_USER_MODEL)),
             ],
         ),
diff --git a/alumniportal/models.py b/alumniportal/models.py
index 114b42d..406ffb5 100644
--- a/alumniportal/models.py
+++ b/alumniportal/models.py
@@ -50,8 +50,8 @@ class Profile(models.Model):
     github_link = models.URLField(blank=True) #Github Repo Link
     twitter_link = models.URLField(blank=True)    #Twitter Profile Link
 
-    current_job = models.OneToOneField('Job', blank=True, null=True, related_name='current_job')   #Row ID of the job object currently doing
-    current_education = models.OneToOneField('Education', blank=True, null =True, related_name='current_education')
+    currentJob = models.OneToOneField('Job', blank=True, null=True, related_name='currentJob')   #Row ID of the job object currently doing
+    currentEducation = models.OneToOneField('Education', blank=True, null =True, related_name='currentEducation')
 
     def __unicode__(self):
         return str(self.user.username)
diff --git a/alumniportal/templates/alumniportal/search.html b/alumniportal/templates/alumniportal/search.html
index f91b867..5aa07de 100644
--- a/alumniportal/templates/alumniportal/search.html
+++ b/alumniportal/templates/alumniportal/search.html
@@ -151,7 +151,7 @@
 
 										</div>
 								 		<div class="form-element-container col-md-8">
-									 		<input type="text" class="form-control" name="current_job__company" id="current_job">
+									 		<input type="text" class="form-control" name="currentJob__company" id="currentJob">
 								 		</div>
 									</div>
 				                	<h5>Past Jobs</h5>
diff --git a/alumniportal/templates/alumniportal/widgets/login.html b/alumniportal/templates/alumniportal/widgets/login.html
index 9bf2fc9..445ffb6 100644
--- a/alumniportal/templates/alumniportal/widgets/login.html
+++ b/alumniportal/templates/alumniportal/widgets/login.html
@@ -1,3 +1,4 @@
+<!-- Please implement the select hostel and the other hostel fields -->
 <div class="row">
         {% if not request.user.is_authenticated %}
           
@@ -46,4 +47,5 @@
                           </form>
                       </div>
                      </div>
-                {% endif %}
\ No newline at end of file
+                {% endif %}
+
diff --git a/alumniportal/templates/base.html b/alumniportal/templates/base.html
index a4fbd2b..8a8ba7b 100644
--- a/alumniportal/templates/base.html
+++ b/alumniportal/templates/base.html
@@ -62,6 +62,8 @@
 	          <!--  Main Content - add the block (complete contents of file) here -->
 	          {% if page == "home" %}
 	          	{% block home %}{% endblock %}
+	          {% elif page == "login" %}
+	          	{% block login %}{% endblock %}
 	          {% elif page == "activity" %}
 	          	{% block activity %}{% endblock %}
 	          {% elif page == "volunteer" %}
diff --git a/login/views.py b/login/views.py
index 9b7cc10..3f90e89 100644
--- a/login/views.py
+++ b/login/views.py
@@ -11,9 +11,9 @@ def login(request):
         next_url  = request.GET.get('next',False)
     if not request.user.is_authenticated():
         if next_url is not None:
-            return render(request, 'login-page.html',{'next':next_url})
+            return render(request, 'login-page.html',{'next':next_url,'page':login})
         else :
-            return render(request, 'login-page.html',{'next':''})
+            return render(request, 'login-page.html',{'next':'','page':login})
 
     else:
         return HttpResponseRedirect('/')
